import React, { useState } from "react";
import { ethers } from "ethers";
import RPSAbi from "./RPSAbi.json";
import HasherAbi from "./HasherAbi.json";
import "./App.css";

const App = () => {
  const [step, setStep] = useState("menu");
  const [contractAddress, setContractAddress] = useState("");
  const [amount, setAmount] = useState("");
  const [player2Address, setPlayer2Address] = useState("");
  const [move, setMove] = useState("");
  const [salt, setSalt] = useState("");
  const [gameHistory, setGameHistory] = useState([]);
  const [error, setError] = useState("");
  const [isSecondPlayerPlayed, setIsSecondPlayerPlayed] = useState(false);

  const emojiMap = {
    1: "‚úä", // Rock
    2: "‚úåÔ∏è", // Scissors
    3: "‚úã", // Paper
    4: "üññ", // Spock
    5: "ü¶é", // Lizard
  };

  const hasherBytecode =
    "6080604052348015600e575f5ffd5b506102208061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610029575f3560e01c806367ef4c131461002d575b5f5ffd5b610047600480360381019061004291906100fc565b61005d565b6040516100549190610152565b60405180910390f35b5f82826040516020016100719291906101bf565b60405160208183030381529060405280519060200120905092915050565b5f5ffd5b5f60ff82169050919050565b6100a881610093565b81146100b2575f5ffd5b50565b5f813590506100c38161009f565b92915050565b5f819050919050565b6100db816100c9565b81146100e5575f5ffd5b50565b5f813590506100f6816100d2565b92915050565b5f5f604083850312156101125761011161008f565b5b5f61011f858286016100b5565b9250506020610130858286016100e8565b9150509250929050565b5f819050919050565b61014c8161013a565b82525050565b5f6020820190506101655f830184610143565b92915050565b5f8160f81b9050919050565b5f6101818261016b565b9050919050565b61019961019482610093565b610177565b82525050565b5f819050919050565b6101b96101b4826100c9565b61019f565b82525050565b5f6101ca8285610188565b6001820191506101da82846101a8565b602082019150819050939250505056fea26469706673582212204b8da86a450c717b43d2457596fc730764a33993ca89080c9ce263ff774bfd7964736f6c634300081c0033";
  const rpsBytecode =
    "608060405261012c600555604051612169380380612169833981810160405281019061002b9190610157565b34600481905550335f5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600281905550426006819055505050610195565b5f5ffd5b5f819050919050565b6100dc816100ca565b81146100e6575f5ffd5b50565b5f815190506100f7816100d3565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610126826100fd565b9050919050565b6101368161011c565b8114610140575f5ffd5b50565b5f815190506101518161012d565b92915050565b5f5f6040838503121561016d5761016c6100c6565b5b5f61017a858286016100e9565b925050602061018b85828601610143565b9150509250929050565b611fc7806101a25f395ff3fe6080604052600436106100dc575f3560e01c8063a2f77bcc1161007e578063c839114211610058578063c839114214610272578063d3438aa214610288578063e87c0ee6146102c9578063f56f48f2146102f3576100dc565b8063a2f77bcc146101e4578063a5ddec7c14610220578063c37597c614610248576100dc565b80634d03e3d2116100ba5780634d03e3d21461014a57806353a04b051461017457806380985af91461019057806389f71d53146101ba576100dc565b8063294914a4146100e05780633a4b66f1146100f657806348e257cb14610120575b5f5ffd5b3480156100eb575f5ffd5b506100f461031d565b005b348015610101575f5ffd5b5061010a610451565b6040516101179190611342565b60405180910390f35b34801561012b575f5ffd5b50610134610457565b60405161014191906113ce565b60405180910390f35b348015610155575f5ffd5b5061015e610469565b60405161016b91906113ff565b60405180910390f35b61018e6004803603810190610189919061143f565b61046f565b005b34801561019b575f5ffd5b506101a461064f565b6040516101b191906114a9565b60405180910390f35b3480156101c5575f5ffd5b506101ce610674565b6040516101db9190611342565b60405180910390f35b3480156101ef575f5ffd5b5061020a600480360381019061020591906114ec565b61067a565b604051610217919061163a565b60405180910390f35b34801561022b575f5ffd5b506102466004803603810190610241919061165a565b6108b4565b005b348015610253575f5ffd5b5061025c610f38565b60405161026991906114a9565b60405180910390f35b34801561027d575f5ffd5b50610286610f5c565b005b348015610293575f5ffd5b506102ae60048036038101906102a991906114ec565b61109d565b6040516102c0969594939291906116e0565b60405180910390f35b3480156102d4575f5ffd5b506102dd6111c2565b6040516102ea9190611342565b60405180910390f35b3480156102fe575f5ffd5b506103076111ce565b6040516103149190611342565b60405180910390f35b5f60058111156103305761032f61135b565b5b60035f9054906101000a900460ff1660058111156103515761035061135b565b5b14610391576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038890611790565b60405180910390fd5b6005546006546103a191906117db565b42116103e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d990611858565b60405180910390fd5b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc60045490811502906040515f60405180830381858888f19350505050158015610447573d5f5f3e3d5ffd5b505f600481905550565b60045481565b60035f9054906101000a900460ff1681565b60025481565b5f60058111156104825761048161135b565b5b60035f9054906101000a900460ff1660058111156104a3576104a261135b565b5b146104e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104da90611790565b60405180910390fd5b5f60058111156104f6576104f561135b565b5b8160058111156105095761050861135b565b5b03610549576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610540906118c0565b60405180910390fd5b600454341461058d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058490611928565b60405180910390fd5b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461061c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061390611990565b60405180910390fd5b8060035f6101000a81548160ff021916908360058111156106405761063f61135b565b5b02179055504260068190555050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b6106826112a9565b60078054905082106106c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c0906119f8565b60405180910390fd5b600782815481106106dd576106dc611a16565b5b905f5260205f2090600402016040518060c00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff1660058111156107c2576107c161135b565b5b60058111156107d4576107d361135b565b5b81526020016001820160159054906101000a900460ff1660058111156107fd576107fc61135b565b5b600581111561080f5761080e61135b565b5b81526020016002820154815260200160038201805461082d90611a70565b80601f016020809104026020016040519081016040528092919081815260200182805461085990611a70565b80156108a45780601f1061087b576101008083540402835291602001916108a4565b820191905f5260205f20905b81548152906001019060200180831161088757829003601f168201915b5050505050815250509050919050565b5f60058111156108c7576108c661135b565b5b8260058111156108da576108d961135b565b5b0361091a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610911906118c0565b60405180910390fd5b5f600581111561092d5761092c61135b565b5b60035f9054906101000a900460ff16600581111561094e5761094d61135b565b5b0361098e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098590611aea565b60405180910390fd5b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1390611b52565b60405180910390fd5b6002548282604051602001610a32929190611bc4565b6040516020818303038152906040528051906020012014610a88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7f90611c39565b60405180910390fd5b6060610aa28360035f9054906101000a900460ff166111d4565b15610b56575f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6004546002610af09190611c57565b90811502906040515f60405180830381858888f19350505050158015610b18573d5f5f3e3d5ffd5b506040518060400160405280600781526020017f6a312077696e73000000000000000000000000000000000000000000000000008152509050610d2a565b610b6e60035f9054906101000a900460ff16846111d4565b15610c235760015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6004546002610bbd9190611c57565b90811502906040515f60405180830381858888f19350505050158015610be5573d5f5f3e3d5ffd5b506040518060400160405280600781526020017f6a322077696e73000000000000000000000000000000000000000000000000008152509050610d29565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc60045490811502906040515f60405180830381858888f19350505050158015610c88573d5f5f3e3d5ffd5b5060015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc60045490811502906040515f60405180830381858888f19350505050158015610cef573d5f5f3e3d5ffd5b506040518060400160405280600481526020017f447261770000000000000000000000000000000000000000000000000000000081525090505b5b60076040518060c001604052805f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001856005811115610dc357610dc261135b565b5b815260200160035f9054906101000a900460ff166005811115610de957610de861135b565b5b8152602001600454815260200183815250908060018154018082558091505060019003905f5260205f2090600402015f909190919091505f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff02191690836005811115610ed557610ed461135b565b5b021790555060608201518160010160156101000a81548160ff02191690836005811115610f0557610f0461135b565b5b02179055506080820151816002015560a0820151816003019081610f299190611e65565b5050505f600481905550505050565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f6005811115610f6f57610f6e61135b565b5b60035f9054906101000a900460ff166005811115610f9057610f8f61135b565b5b03610fd0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc790611aea565b60405180910390fd5b600554600654610fe091906117db565b4211611021576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101890611858565b60405180910390fd5b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc600454600261106b9190611c57565b90811502906040515f60405180830381858888f19350505050158015611093573d5f5f3e3d5ffd5b505f600481905550565b600781815481106110ac575f80fd5b905f5260205f2090600402015f91509050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900460ff16908060010160159054906101000a900460ff169080600201549080600301805461114190611a70565b80601f016020809104026020016040519081016040528092919081815260200182805461116d90611a70565b80156111b85780601f1061118f576101008083540402835291602001916111b8565b820191905f5260205f20905b81548152906001019060200180831161119b57829003601f168201915b5050505050905086565b5f600780549050905090565b60055481565b5f8160058111156111e8576111e761135b565b5b8360058111156111fb576111fa61135b565b5b03611208575f90506112a3565b600282600581111561121d5761121c61135b565b5b6112279190611f61565b600284600581111561123c5761123b61135b565b5b6112469190611f61565b036112795781600581111561125e5761125d61135b565b5b8360058111156112715761127061135b565b5b1090506112a3565b81600581111561128c5761128b61135b565b5b83600581111561129f5761129e61135b565b5b1190505b92915050565b6040518060c001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f60058111156112ff576112fe61135b565b5b81526020015f60058111156113175761131661135b565b5b81526020015f8152602001606081525090565b5f819050919050565b61133c8161132a565b82525050565b5f6020820190506113555f830184611333565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b600681106113995761139861135b565b5b50565b5f8190506113a982611388565b919050565b5f6113b88261139c565b9050919050565b6113c8816113ae565b82525050565b5f6020820190506113e15f8301846113bf565b92915050565b5f819050919050565b6113f9816113e7565b82525050565b5f6020820190506114125f8301846113f0565b92915050565b5f5ffd5b60068110611428575f5ffd5b50565b5f813590506114398161141c565b92915050565b5f6020828403121561145457611453611418565b5b5f6114618482850161142b565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6114938261146a565b9050919050565b6114a381611489565b82525050565b5f6020820190506114bc5f83018461149a565b92915050565b6114cb8161132a565b81146114d5575f5ffd5b50565b5f813590506114e6816114c2565b92915050565b5f6020828403121561150157611500611418565b5b5f61150e848285016114d8565b91505092915050565b61152081611489565b82525050565b61152f816113ae565b82525050565b61153e8161132a565b82525050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f61158682611544565b611590818561154e565b93506115a081856020860161155e565b6115a98161156c565b840191505092915050565b5f60c083015f8301516115c95f860182611517565b5060208301516115dc6020860182611517565b5060408301516115ef6040860182611526565b5060608301516116026060860182611526565b5060808301516116156080860182611535565b5060a083015184820360a086015261162d828261157c565b9150508091505092915050565b5f6020820190508181035f83015261165281846115b4565b905092915050565b5f5f604083850312156116705761166f611418565b5b5f61167d8582860161142b565b925050602061168e858286016114d8565b9150509250929050565b5f82825260208201905092915050565b5f6116b282611544565b6116bc8185611698565b93506116cc81856020860161155e565b6116d58161156c565b840191505092915050565b5f60c0820190506116f35f83018961149a565b611700602083018861149a565b61170d60408301876113bf565b61171a60608301866113bf565b6117276080830185611333565b81810360a083015261173981846116a8565b9050979650505050505050565b7f6a322068617320616c726561647920706c617965642e000000000000000000005f82015250565b5f61177a601683611698565b915061178582611746565b602082019050919050565b5f6020820190508181035f8301526117a78161176e565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6117e58261132a565b91506117f08361132a565b9250828201905080821115611808576118076117ae565b5b92915050565b7f54696d656f757420686173206e6f74207061737365642e0000000000000000005f82015250565b5f611842601783611698565b915061184d8261180e565b602082019050919050565b5f6020820190508181035f83015261186f81611836565b9050919050565b7f496e76616c6964206d6f76652e000000000000000000000000000000000000005f82015250565b5f6118aa600d83611698565b91506118b582611876565b602082019050919050565b5f6020820190508181035f8301526118d78161189e565b9050919050565b7f5374616b6520646f6573206e6f74206d617463682e00000000000000000000005f82015250565b5f611912601583611698565b915061191d826118de565b602082019050919050565b5f6020820190508181035f83015261193f81611906565b9050919050565b7f4f6e6c79206a322063616e20706c61792e0000000000000000000000000000005f82015250565b5f61197a601183611698565b915061198582611946565b602082019050919050565b5f6020820190508181035f8301526119a78161196e565b9050919050565b7f496e76616c696420696e6465782e0000000000000000000000000000000000005f82015250565b5f6119e2600e83611698565b91506119ed826119ae565b602082019050919050565b5f6020820190508181035f830152611a0f816119d6565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680611a8757607f821691505b602082108103611a9a57611a99611a43565b5b50919050565b7f6a3220686173206e6f7420706c617965642e00000000000000000000000000005f82015250565b5f611ad4601283611698565b9150611adf82611aa0565b602082019050919050565b5f6020820190508181035f830152611b0181611ac8565b9050919050565b7f4f6e6c79206a312063616e20736f6c76652e00000000000000000000000000005f82015250565b5f611b3c601283611698565b9150611b4782611b08565b602082019050919050565b5f6020820190508181035f830152611b6981611b30565b9050919050565b5f8160f81b9050919050565b5f611b8682611b70565b9050919050565b611b9e611b99826113ae565b611b7c565b82525050565b5f819050919050565b611bbe611bb98261132a565b611ba4565b82525050565b5f611bcf8285611b8d565b600182019150611bdf8284611bad565b6020820191508190509392505050565b7f436f6d6d69746d656e7420646f6573206e6f74206d617463682e0000000000005f82015250565b5f611c23601a83611698565b9150611c2e82611bef565b602082019050919050565b5f6020820190508181035f830152611c5081611c17565b9050919050565b5f611c618261132a565b9150611c6c8361132a565b9250828202611c7a8161132a565b91508282048414831517611c9157611c906117ae565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302611d217fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611ce6565b611d2b8683611ce6565b95508019841693508086168417925050509392505050565b5f819050919050565b5f611d66611d61611d5c8461132a565b611d43565b61132a565b9050919050565b5f819050919050565b611d7f83611d4c565b611d93611d8b82611d6d565b848454611cf2565b825550505050565b5f5f905090565b611daa611d9b565b611db5818484611d76565b505050565b5b81811015611dd857611dcd5f82611da2565b600181019050611dbb565b5050565b601f821115611e1d57611dee81611cc5565b611df784611cd7565b81016020851015611e06578190505b611e1a611e1285611cd7565b830182611dba565b50505b505050565b5f82821c905092915050565b5f611e3d5f1984600802611e22565b1980831691505092915050565b5f611e558383611e2e565b9150826002028217905092915050565b611e6e82611544565b67ffffffffffffffff811115611e8757611e86611c98565b5b611e918254611a70565b611e9c828285611ddc565b5f60209050601f831160018114611ecd575f8415611ebb578287015190505b611ec58582611e4a565b865550611f2c565b601f198416611edb86611cc5565b5f5b82811015611f0257848901518255600182019150602085019450602081019050611edd565b86831015611f1f5784890151611f1b601f891682611e2e565b8355505b6001600288020188555050505b505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f611f6b8261132a565b9150611f768361132a565b925082611f8657611f85611f34565b5b82820690509291505056fea2646970667358221220fc3e0abbfffb89c7e61a7fdda66bed6ac11e87105ed54e67c15e861ac12288b064736f6c634300081c0033";

  const hasherAddress = "0x208cA2018F90785d3dF4606a8ae707457138E979"; // –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ Hasher

  const handleStartGame = async () => {
    try {
      const provider = new ethers.providers.Web3Provider(window.ethereum);
      const signer = provider.getSigner();

      const hasherContract = new ethers.Contract(
        hasherAddress,
        HasherAbi,
        signer
      );

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Å–æ–ª–∏ –∏ —Ö—ç—à–∞
      const randomSalt = ethers.BigNumber.from(ethers.utils.randomBytes(32));
      const hash = await hasherContract.hash(parseInt(move), randomSalt);

      // –î–µ–ø–ª–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ RPS
      const factory = new ethers.ContractFactory(RPSAbi, rpsBytecode, signer);
      const rpsContract = await factory.deploy(hash, player2Address, {
        value: ethers.utils.parseEther(amount),
      });

      await rpsContract.deployed();

      setContractAddress(rpsContract.address);
      setSalt(randomSalt.toString());
      setStep("waitingForJoin");
    } catch (err) {
      setError(err.message);
    }
  };

  const handleJoinGame = async () => {
    try {
      const provider = new ethers.providers.Web3Provider(window.ethereum);
      const signer = provider.getSigner();
      const rpsContract = new ethers.Contract(contractAddress, RPSAbi, signer);

      const stake = await rpsContract.stake();
      await rpsContract.play(parseInt(move), { value: stake });

      setIsSecondPlayerPlayed(true); // Set to true when the second player has joined
      setStep("waitingForReveal");
    } catch (err) {
      setError(err.message);
    }
  };

  const handleRevealMove = async () => {
    try {
      const provider = new ethers.providers.Web3Provider(window.ethereum);
      const signer = provider.getSigner();
      const rpsContract = new ethers.Contract(contractAddress, RPSAbi, signer);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ `move` –∏ `salt` –∑–∞–¥–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
      if (!move) throw new Error("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ö–æ–¥!");
      if (!salt) throw new Error("–°–æ–ª—å –Ω–µ –∑–∞–¥–∞–Ω–∞!");

      await rpsContract.solve(parseInt(move), salt);
      setStep("gameFinished");
    } catch (err) {
      setError(err.message);
    }
  };

  const fetchHistory = async () => {
    try {
      const provider = new ethers.providers.Web3Provider(window.ethereum);
      const rpsContract = new ethers.Contract(
        contractAddress,
        RPSAbi,
        provider
      );

      const gameCount = await rpsContract.getGameCount();
      const history = [];
      for (let i = 0; i < gameCount; i++) {
        history.push(await rpsContract.getGame(i));
      }
      setGameHistory(history);
    } catch (err) {
      setError(err.message);
    }
  };

  return (
    <div className="app-container">
      {/* Decorative Emojis in the background */}
      <div className="emoji emoji-left">‚úä</div>
      <div className="emoji emoji-right">‚úåÔ∏è</div>
      <div className="emoji emoji-bottom">‚úã</div>

      <h1 className="title">Rock-Paper-Scissors Game (Test)</h1>
      {error && <p className="error">{error}</p>}

      {step === "menu" && (
        <div className="menu">
          <button onClick={() => setStep("startGame")} className="button">
            Start Game
          </button>
          <button onClick={() => setStep("joinGame")} className="button">
            Join Game
          </button>
          <button onClick={fetchHistory} className="button">
            View Game History
          </button>
        </div>
      )}

      {step === "startGame" && (
        <div className="form">
          <input
            type="number"
            placeholder="Amount to stake (ETH)"
            value={amount}
            onChange={(e) => setAmount(e.target.value)}
            className="input"
          />
          <input
            type="text"
            placeholder="Address of 2nd player"
            value={player2Address}
            onChange={(e) => setPlayer2Address(e.target.value)}
            className="input"
          />
          <input
            type="number"
            placeholder="Your move (1-5)"
            value={move}
            onChange={(e) => setMove(e.target.value)}
            className="input"
          />
          <button onClick={handleStartGame} className="button">
            Deploy Contract
          </button>
        </div>
      )}

      {step === "waitingForJoin" && (
        <div className="status">
          <p>Waiting for the second player to join.</p>
          <p>
            Contract Address:{" "}
            <span className="contract-address">{contractAddress}</span>
          </p>
          <button
            onClick={handleRevealMove}
            className="button"
            disabled={!isSecondPlayerPlayed}
          >
            Reveal Move
          </button>
        </div>
      )}

      {step === "joinGame" && (
        <div className="form">
          <input
            type="text"
            placeholder="Contract Address"
            value={contractAddress}
            onChange={(e) => setContractAddress(e.target.value)}
            className="input"
          />
          <input
            type="number"
            placeholder="Your move (1-5)"
            value={move}
            onChange={(e) => setMove(e.target.value)}
            className="input"
          />
          <button onClick={handleJoinGame} className="button">
            Join Game
          </button>
        </div>
      )}

      {step === "waitingForReveal" && (
        <button onClick={handleRevealMove} className="button">
          Reveal Move
        </button>
      )}

      {step === "gameFinished" && (
        <div className="status">
          <p>Game finished. Check contract for results.</p>
        </div>
      )}

      {gameHistory.length > 0 && (
        <div className="history">
          <h2>Game History</h2>
          {gameHistory.map((game, index) => (
            <p key={index} className="history-item">
              Game {index + 1}: {game.result}
            </p>
          ))}
        </div>
      )}
      {/* Display the selected move as a glowing emoji at the bottom */}
      {move && (
        <div className="selected-move">
          <span className="glow-emoji">{emojiMap[move]}</span>
        </div>
      )}
    </div>
  );
};

export default App;
